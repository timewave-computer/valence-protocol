name: build and test

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# Ensures that only a single workflow per PR will run at a time. Cancels in-progress jobs if new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FOUNDRY_PROFILE: ci
  RUSTFLAGS: "-Dwarnings"
  GO_VERSION: 1.21

jobs:
  solidity:
    strategy:
      fail-fast: true

    name: solidity contracts
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./solidity

    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: solidity-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'flake.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - uses: nicknovitski/nix-develop@v1

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge fmt
        run: |
          forge fmt --check
        id: fmt

      - name: Run Forge build and tests
        # nix derivation includes forge tests in checkPhase
        run: |
          nix build -vL .#valence-solidity-contracts --out-link out
        id: build

  build:
    needs: [solidity]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: solidity-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'flake.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - uses: nicknovitski/nix-develop@v1

      - name: Pull forge build from cache
        run: |
          nix build -vL .#valence-solidity-contracts --out-link solidity/out

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run taplo (toml fmt)
        run: ./devtools/toml_fmt.sh --check

      - name: Run clippy
        run: cargo clippy --all-targets --verbose -- -D warnings

      - name: Optimize contracts
        run: |
          nix build -vL .#valence-cosmwasm-contracts --out-link artifacts

      - name: List artifact contents
        run: ls -l ./artifacts

  schema-checks:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: solidity-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'flake.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - uses: nicknovitski/nix-develop@v1

      - name: Generate contract schemas
        run: ./devtools/schema.sh
        env:
          USE_NIX: true

      - name: Show schema changes
        run: git status --porcelain

      - name: Validate committed schemas
        # should fail if any diffs are present
        run: test -z "$(git status --porcelain)"

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space
        uses: "./.github/actions/free-disk-space"

      - uses: nixbuild/nix-quick-install-action@v29

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: solidity-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'flake.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - uses: nicknovitski/nix-develop@v1

      - name: Pull WASM and Forge artifacts
        run: |
          nix build -vL .#valence-cosmwasm-contracts --out-link artifacts
          nix build -vL .#valence-solidity-contracts --out-link solidity/out

      - name: List artifacts
        run: ls -l ./artifacts

      - name: Run cargo and nix tests
        # nextest check derivation runs cargo tests
        run: nix flake check -vL
        env:
          RUST_BACKTRACE: 1

  local-ic-polytone:
    needs: [build, setup-local-ic]
    name: authorization & processor polytone integration test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run polytone example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_osmosis"
          test-name: "polytone"

  local-ic-token-swap:
    needs: [build, setup-local-ic]
    name: token swap e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run token_swap example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron"
          example-name: "token_swap"

  local-ic-2-party-pol-astroport-neutron:
    needs: [build, setup-local-ic]
    name: 2 party POL Astroport on Neutron e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run 2 party POL Astroport on Neutron example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron"
          test-name: "two_party_pol_astroport_neutron"

  local-ic-ibc-transfer-ntrn-juno:
    needs: [build, setup-local-ic]
    name: IBC transfer NTRN->JUNO e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run IBC transfer NTRN->JUNO example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_juno"
          test-name: "ibc_transfer_ntrn_juno"

  local-ic-ibc-transfer-juno-ntrn:
    needs: [build, setup-local-ic]
    name: IBC transfer JUNO->NTRN e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run IBC transfer JUNO->NTRN example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_juno"
          test-name: "ibc_transfer_juno_ntrn"

  local-ic-ibc-transfer-ntrn-juno-gaia-pfm:
    needs: [build, setup-local-ic]
    name: IBC transfer NTRN->JUNO->GAIA PFM e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run IBC transfer NTRN->JUNO->GAIA PFM example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_juno"
          test-name: "ibc_transfer_ntrn_juno_gaia_pfm"

  local-ic-ibc-transfer-osmo-ntrn:
    needs: [build, setup-local-ic]
    name: IBC transfer OSMO->NTRN e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run IBC transfer OSMO->NTRN example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_osmosis"
          test-name: "ibc_transfer_osmo_ntrn"

  local-ic-ibc-transfer-osmo-juno-gaia-pfm:
    needs: [build, setup-local-ic]
    name: IBC transfer OSMO->JUNO->GAIA PFM e2e test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run IBC transfer OSMO->JUNO->GAIA PFM example
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "juno_osmosis"
          test-name: "ibc_transfer_osmo_juno_gaia_pfm"

  local-ic-osmo-gamm-tests:
    needs: [build, setup-local-ic]
    name: Osmosis GAMM e2e lp -> lw run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run osmo gamm lp & lw tests
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron_osmosis"
          example-name: "osmo_gamm"

  local-ic-osmo-cl-tests:
    needs: [build, setup-local-ic]
    name: Osmosis concentrated liquidity e2e lp -> lw run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run osmo cl lp & lw tests
        uses: "./.github/actions/run-local-ic"
        with:
          chain-config: "neutron_osmosis"
          example-name: "osmo_cl"

  local-ic-ethereum-e2e-tests:
    needs: [build, setup-local-ic]
    name: Ethereum e2e tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ethereum e2e tests
        uses: "./.github/actions/run-local-ic-test"
        with:
          chain-config: "neutron"
          test-name: "ethereum_integration_tests"
