name: Run a local-ic test

inputs:
  chain-config: # id of input
    description: "Chain config to use for the test"
    required: true
  test-name:
    description: "Name of the test to run"
  example-name:
    description: "Name of example to run"

runs:
  using: "composite"
  steps:
    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        # restore and save a cache using this key
        primary-key: solidity-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'flake.nix', 'flake.lock') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-

    - uses: nicknovitski/nix-develop@v1

    - name: Pull WASM and Forge artifacts
      run: |
        nix build -vL .#valence-cosmwasm-contracts --out-link artifacts
        nix build -vL .#valence-solidity-contracts --out-link solidity/out

    - name: List artifacts
      run: ls -l ./artifacts

    - name: Start local-ic and wait for it to be ready
      shell: bash
      run: ./scripts/start-local-ic.sh ${{ inputs.chain-config }}

    - name: Run local-ic example
      if: ${{ inputs.example-name != '' }}
      shell: bash
      env:
        RUST_LOG: debug
-     run: cargo run --package valence-program-examples --bin ${{ inputs.test-name }}

    - name: Run local-ic test
      if: ${{ inputs.test-name != '' }}
      shell: bash
      env:
        RUST_LOG: debug
      run: cargo run --package valence-e2e --example ${{ inputs.example-name }}


    - name: Cleanup
      shell: bash
      run: killall local-ic && exit 0
