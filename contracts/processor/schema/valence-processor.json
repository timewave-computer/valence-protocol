{
  "contract_name": "valence-processor",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "authorization_contract"
    ],
    "properties": {
      "authorization_contract": {
        "type": "string"
      },
      "polytone_contracts": {
        "anyOf": [
          {
            "$ref": "#/definitions/PolytoneContracts"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "PolytoneContracts": {
        "type": "object",
        "required": [
          "polytone_note_address",
          "polytone_proxy_address",
          "timeout_seconds"
        ],
        "properties": {
          "polytone_note_address": {
            "type": "string"
          },
          "polytone_proxy_address": {
            "type": "string"
          },
          "timeout_seconds": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "authorization_module_action"
        ],
        "properties": {
          "authorization_module_action": {
            "$ref": "#/definitions/AuthorizationMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "permissionless_action"
        ],
        "properties": {
          "permissionless_action": {
            "$ref": "#/definitions/PermissionlessMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "internal_processor_action"
        ],
        "properties": {
          "internal_processor_action": {
            "$ref": "#/definitions/InternalProcessorMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMessage"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          }
        },
        "additionalProperties": false
      },
      "AtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AtomicFunction"
            }
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Attribute": {
        "description": "An key value pair that is used in the context of event attributes in logs",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "enqueue_msgs"
            ],
            "properties": {
              "enqueue_msgs": {
                "type": "object",
                "required": [
                  "id",
                  "msgs",
                  "priority",
                  "subroutine"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ProcessorMessage"
                    }
                  },
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "subroutine": {
                    "$ref": "#/definitions/Subroutine"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "evict_msgs"
            ],
            "properties": {
              "evict_msgs": {
                "type": "object",
                "required": [
                  "priority",
                  "queue_position"
                ],
                "properties": {
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "queue_position": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "insert_msgs"
            ],
            "properties": {
              "insert_msgs": {
                "type": "object",
                "required": [
                  "id",
                  "msgs",
                  "priority",
                  "queue_position",
                  "subroutine"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ProcessorMessage"
                    }
                  },
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "queue_position": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "subroutine": {
                    "$ref": "#/definitions/Subroutine"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "pause"
            ],
            "properties": {
              "pause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "resume"
            ],
            "properties": {
              "resume": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Callback": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "query"
            ],
            "properties": {
              "query": {
                "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fatal_error"
            ],
            "properties": {
              "fatal_error": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CallbackMessage": {
        "type": "object",
        "required": [
          "initiator",
          "initiator_msg",
          "result"
        ],
        "properties": {
          "initiator": {
            "description": "Initaitor on the note chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "initiator_msg": {
            "description": "Message sent by the initaitor. This _must_ be base64 encoded or execution will fail.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "result": {
            "description": "Data from the host chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Callback"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CurrentRetry": {
        "type": "object",
        "required": [
          "retry_amounts",
          "retry_cooldown"
        ],
        "properties": {
          "retry_amounts": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "retry_cooldown": {
            "$ref": "#/definitions/Expiration"
          }
        },
        "additionalProperties": false
      },
      "Domain": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "main"
            ]
          },
          {
            "type": "object",
            "required": [
              "external"
            ],
            "properties": {
              "external": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message_index"
        ],
        "properties": {
          "error": {
            "description": "The error that occured executing the message.",
            "type": "string"
          },
          "message_index": {
            "description": "The index of the first message who's execution failed.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Event": {
        "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
        "type": "object",
        "required": [
          "attributes",
          "type"
        ],
        "properties": {
          "attributes": {
            "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "type": {
            "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExecutionResponse": {
        "type": "object",
        "required": [
          "executed_by",
          "result"
        ],
        "properties": {
          "executed_by": {
            "description": "The address on the remote chain that executed the messages.",
            "type": "string"
          },
          "result": {
            "description": "Index `i` corresponds to the result of executing the `i`th message.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubMsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FunctionCallback": {
        "type": "object",
        "required": [
          "callback_message",
          "contract_address"
        ],
        "properties": {
          "callback_message": {
            "$ref": "#/definitions/Binary"
          },
          "contract_address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "InternalProcessorMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "library_callback"
            ],
            "properties": {
              "library_callback": {
                "type": "object",
                "required": [
                  "execution_id",
                  "msg"
                ],
                "properties": {
                  "execution_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "execute_atomic"
            ],
            "properties": {
              "execute_atomic": {
                "type": "object",
                "required": [
                  "batch"
                ],
                "properties": {
                  "batch": {
                    "$ref": "#/definitions/MessageBatch"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryAccountType": {
        "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "|library_account_addr|"
            ],
            "properties": {
              "|library_account_addr|": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|account_id|"
            ],
            "properties": {
              "|account_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|library_id|"
            ],
            "properties": {
              "|library_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Message": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "params_restrictions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/ParamRestriction"
            }
          }
        },
        "additionalProperties": false
      },
      "MessageBatch": {
        "type": "object",
        "required": [
          "id",
          "msgs",
          "priority",
          "subroutine"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "msgs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProcessorMessage"
            }
          },
          "priority": {
            "$ref": "#/definitions/Priority"
          },
          "retry": {
            "anyOf": [
              {
                "$ref": "#/definitions/CurrentRetry"
              },
              {
                "type": "null"
              }
            ]
          },
          "subroutine": {
            "$ref": "#/definitions/Subroutine"
          }
        },
        "additionalProperties": false
      },
      "MessageDetails": {
        "type": "object",
        "required": [
          "message",
          "message_type"
        ],
        "properties": {
          "message": {
            "$ref": "#/definitions/Message"
          },
          "message_type": {
            "$ref": "#/definitions/MessageType"
          }
        },
        "additionalProperties": false
      },
      "MessageType": {
        "type": "string",
        "enum": [
          "cosmwasm_execute_msg",
          "cosmwasm_migrate_msg"
        ]
      },
      "MsgResponse": {
        "type": "object",
        "required": [
          "type_url",
          "value"
        ],
        "properties": {
          "type_url": {
            "type": "string"
          },
          "value": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "NonAtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "callback_confirmation": {
            "anyOf": [
              {
                "$ref": "#/definitions/FunctionCallback"
              },
              {
                "type": "null"
              }
            ]
          },
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "NonAtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NonAtomicFunction"
            }
          }
        },
        "additionalProperties": false
      },
      "ParamRestriction": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "must_be_included"
            ],
            "properties": {
              "must_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cannot_be_included"
            ],
            "properties": {
              "cannot_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "must_be_value"
            ],
            "properties": {
              "must_be_value": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PermissionlessMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "tick"
            ],
            "properties": {
              "tick": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "retry_callback"
            ],
            "properties": {
              "retry_callback": {
                "type": "object",
                "required": [
                  "execution_id"
                ],
                "properties": {
                  "execution_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "retry_bridge_creation"
            ],
            "properties": {
              "retry_bridge_creation": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Priority": {
        "type": "string",
        "enum": [
          "medium",
          "high"
        ]
      },
      "ProcessorMessage": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "cosmwasm_execute_msg"
            ],
            "properties": {
              "cosmwasm_execute_msg": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cosmwasm_migrate_msg"
            ],
            "properties": {
              "cosmwasm_migrate_msg": {
                "type": "object",
                "required": [
                  "code_id",
                  "msg"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_Array_of_Binary_or_ErrorResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Binary"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_ExecutionResponse_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "$ref": "#/definitions/ExecutionResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RetryLogic": {
        "type": "object",
        "required": [
          "interval",
          "times"
        ],
        "properties": {
          "interval": {
            "$ref": "#/definitions/Duration"
          },
          "times": {
            "$ref": "#/definitions/RetryTimes"
          }
        },
        "additionalProperties": false
      },
      "RetryTimes": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "indefinitely"
            ]
          },
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SubMsgResponse": {
        "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "data": {
            "deprecated": true,
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Event"
            }
          },
          "msg_responses": {
            "description": "The responses from the messages emitted by the submessage. In most cases, this is equivalent to the Cosmos SDK's [MsgResponses], which usually contains a [single message]. However, wasmd allows chains to translate a single contract message into multiple SDK messages. In that case all the MsgResponses from each are concatenated into this flattened `Vec`.\n\n[MsgResponses]: https://github.com/cosmos/cosmos-sdk/blob/316750cc8cd8b3296fa233f4da2e39cbcdc34517/proto/cosmos/base/abci/v1beta1/abci.proto#L106-L109 [single message]: https://github.com/cosmos/cosmos-sdk/blob/v0.50.4/baseapp/baseapp.go#L1020-L1023",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/definitions/MsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "Subroutine": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "atomic"
            ],
            "properties": {
              "atomic": {
                "$ref": "#/definitions/AtomicSubroutine"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "non_atomic"
            ],
            "properties": {
              "non_atomic": {
                "$ref": "#/definitions/NonAtomicSubroutine"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_queue"
        ],
        "properties": {
          "get_queue": {
            "type": "object",
            "required": [
              "priority"
            ],
            "properties": {
              "from": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "priority": {
                "$ref": "#/definitions/Priority"
              },
              "to": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_queue_empty"
        ],
        "properties": {
          "is_queue_empty": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pending_polytone_callbacks"
        ],
        "properties": {
          "pending_polytone_callbacks": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pending_polytone_callback"
        ],
        "properties": {
          "pending_polytone_callback": {
            "type": "object",
            "required": [
              "execution_id"
            ],
            "properties": {
              "execution_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Priority": {
        "type": "string",
        "enum": [
          "medium",
          "high"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "authorization_contract",
        "processor_domain",
        "state"
      ],
      "properties": {
        "authorization_contract": {
          "type": "string"
        },
        "processor_domain": {
          "$ref": "#/definitions/ProcessorDomain"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Polytone": {
          "type": "object",
          "required": [
            "polytone_note_address",
            "polytone_proxy_address",
            "proxy_on_main_domain_state",
            "timeout_seconds"
          ],
          "properties": {
            "polytone_note_address": {
              "$ref": "#/definitions/Addr"
            },
            "polytone_proxy_address": {
              "$ref": "#/definitions/Addr"
            },
            "proxy_on_main_domain_state": {
              "$ref": "#/definitions/PolytoneProxyState"
            },
            "timeout_seconds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PolytoneProxyState": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "timed_out",
                "pending_response",
                "created"
              ]
            },
            {
              "type": "object",
              "required": [
                "unexpected_error"
              ],
              "properties": {
                "unexpected_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ProcessorDomain": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "main"
              ]
            },
            {
              "type": "object",
              "required": [
                "external"
              ],
              "properties": {
                "external": {
                  "$ref": "#/definitions/Polytone"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "State": {
          "type": "string",
          "enum": [
            "paused",
            "active"
          ]
        }
      }
    },
    "get_queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_MessageBatch",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MessageBatch"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AtomicFunction": {
          "type": "object",
          "required": [
            "contract_address",
            "domain",
            "message_details"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/LibraryAccountType"
            },
            "domain": {
              "$ref": "#/definitions/Domain"
            },
            "message_details": {
              "$ref": "#/definitions/MessageDetails"
            }
          },
          "additionalProperties": false
        },
        "AtomicSubroutine": {
          "type": "object",
          "required": [
            "functions"
          ],
          "properties": {
            "functions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AtomicFunction"
              }
            },
            "retry_logic": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RetryLogic"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CurrentRetry": {
          "type": "object",
          "required": [
            "retry_amounts",
            "retry_cooldown"
          ],
          "properties": {
            "retry_amounts": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "retry_cooldown": {
              "$ref": "#/definitions/Expiration"
            }
          },
          "additionalProperties": false
        },
        "Domain": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "main"
              ]
            },
            {
              "type": "object",
              "required": [
                "external"
              ],
              "properties": {
                "external": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FunctionCallback": {
          "type": "object",
          "required": [
            "callback_message",
            "contract_address"
          ],
          "properties": {
            "callback_message": {
              "$ref": "#/definitions/Binary"
            },
            "contract_address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LibraryAccountType": {
          "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "|library_account_addr|"
              ],
              "properties": {
                "|library_account_addr|": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "|account_id|"
              ],
              "properties": {
                "|account_id|": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "|library_id|"
              ],
              "properties": {
                "|library_id|": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Message": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "params_restrictions": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/ParamRestriction"
              }
            }
          },
          "additionalProperties": false
        },
        "MessageBatch": {
          "type": "object",
          "required": [
            "id",
            "msgs",
            "priority",
            "subroutine"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "msgs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessorMessage"
              }
            },
            "priority": {
              "$ref": "#/definitions/Priority"
            },
            "retry": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CurrentRetry"
                },
                {
                  "type": "null"
                }
              ]
            },
            "subroutine": {
              "$ref": "#/definitions/Subroutine"
            }
          },
          "additionalProperties": false
        },
        "MessageDetails": {
          "type": "object",
          "required": [
            "message",
            "message_type"
          ],
          "properties": {
            "message": {
              "$ref": "#/definitions/Message"
            },
            "message_type": {
              "$ref": "#/definitions/MessageType"
            }
          },
          "additionalProperties": false
        },
        "MessageType": {
          "type": "string",
          "enum": [
            "cosmwasm_execute_msg",
            "cosmwasm_migrate_msg"
          ]
        },
        "NonAtomicFunction": {
          "type": "object",
          "required": [
            "contract_address",
            "domain",
            "message_details"
          ],
          "properties": {
            "callback_confirmation": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FunctionCallback"
                },
                {
                  "type": "null"
                }
              ]
            },
            "contract_address": {
              "$ref": "#/definitions/LibraryAccountType"
            },
            "domain": {
              "$ref": "#/definitions/Domain"
            },
            "message_details": {
              "$ref": "#/definitions/MessageDetails"
            },
            "retry_logic": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RetryLogic"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "NonAtomicSubroutine": {
          "type": "object",
          "required": [
            "functions"
          ],
          "properties": {
            "functions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonAtomicFunction"
              }
            }
          },
          "additionalProperties": false
        },
        "ParamRestriction": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "must_be_included"
              ],
              "properties": {
                "must_be_included": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cannot_be_included"
              ],
              "properties": {
                "cannot_be_included": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "must_be_value"
              ],
              "properties": {
                "must_be_value": {
                  "type": "array",
                  "items": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Priority": {
          "type": "string",
          "enum": [
            "medium",
            "high"
          ]
        },
        "ProcessorMessage": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cosmwasm_execute_msg"
              ],
              "properties": {
                "cosmwasm_execute_msg": {
                  "type": "object",
                  "required": [
                    "msg"
                  ],
                  "properties": {
                    "msg": {
                      "$ref": "#/definitions/Binary"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cosmwasm_migrate_msg"
              ],
              "properties": {
                "cosmwasm_migrate_msg": {
                  "type": "object",
                  "required": [
                    "code_id",
                    "msg"
                  ],
                  "properties": {
                    "code_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "msg": {
                      "$ref": "#/definitions/Binary"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RetryLogic": {
          "type": "object",
          "required": [
            "interval",
            "times"
          ],
          "properties": {
            "interval": {
              "$ref": "#/definitions/Duration"
            },
            "times": {
              "$ref": "#/definitions/RetryTimes"
            }
          },
          "additionalProperties": false
        },
        "RetryTimes": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "indefinitely"
              ]
            },
            {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Subroutine": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "atomic"
              ],
              "properties": {
                "atomic": {
                  "$ref": "#/definitions/AtomicSubroutine"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "non_atomic"
              ],
              "properties": {
                "non_atomic": {
                  "$ref": "#/definitions/NonAtomicSubroutine"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "is_queue_empty": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "pending_polytone_callback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PendingPolytoneCallbackInfo",
      "type": "object",
      "required": [
        "execution_result",
        "state"
      ],
      "properties": {
        "execution_result": {
          "$ref": "#/definitions/ExecutionResult"
        },
        "state": {
          "$ref": "#/definitions/PolytoneCallbackState"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ExecutionResult": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "in_process",
                "success",
                "removed_by_owner"
              ]
            },
            {
              "type": "object",
              "required": [
                "rejected"
              ],
              "properties": {
                "rejected": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "partially_executed"
              ],
              "properties": {
                "partially_executed": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint",
                      "minimum": 0.0
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "timeout"
              ],
              "properties": {
                "timeout": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unexpected_error"
              ],
              "properties": {
                "unexpected_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PolytoneCallbackState": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "pending",
                "timed_out"
              ]
            },
            {
              "type": "object",
              "required": [
                "unexpected_error"
              ],
              "properties": {
                "unexpected_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "pending_polytone_callbacks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_PendingPolytoneCallbackInfo",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PendingPolytoneCallbackInfo"
      },
      "definitions": {
        "ExecutionResult": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "in_process",
                "success",
                "removed_by_owner"
              ]
            },
            {
              "type": "object",
              "required": [
                "rejected"
              ],
              "properties": {
                "rejected": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "partially_executed"
              ],
              "properties": {
                "partially_executed": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint",
                      "minimum": 0.0
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "timeout"
              ],
              "properties": {
                "timeout": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unexpected_error"
              ],
              "properties": {
                "unexpected_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PendingPolytoneCallbackInfo": {
          "type": "object",
          "required": [
            "execution_result",
            "state"
          ],
          "properties": {
            "execution_result": {
              "$ref": "#/definitions/ExecutionResult"
            },
            "state": {
              "$ref": "#/definitions/PolytoneCallbackState"
            }
          },
          "additionalProperties": false
        },
        "PolytoneCallbackState": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "pending",
                "timed_out"
              ]
            },
            {
              "type": "object",
              "required": [
                "unexpected_error"
              ],
              "properties": {
                "unexpected_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}
