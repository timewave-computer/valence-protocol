{
  "contract_name": "valence-splitter-library",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "config",
      "owner",
      "processor"
    ],
    "properties": {
      "config": {
        "$ref": "#/definitions/LibraryConfig"
      },
      "owner": {
        "type": "string"
      },
      "processor": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "LibraryAccountType": {
        "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "|library_account_addr|"
            ],
            "properties": {
              "|library_account_addr|": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|account_id|"
            ],
            "properties": {
              "|account_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|library_id|"
            ],
            "properties": {
              "|library_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryConfig": {
        "type": "object",
        "required": [
          "input_addr",
          "splits"
        ],
        "properties": {
          "input_addr": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "splits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UncheckedSplitConfig"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "description": "A denom that has not been checked to confirm it points to a valid asset.",
        "oneOf": [
          {
            "description": "A native (bank module) asset.",
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A cw20 asset.",
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fixed_amount"
            ],
            "properties": {
              "fixed_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fixed_ratio"
            ],
            "properties": {
              "fixed_ratio": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dynamic_ratio"
            ],
            "properties": {
              "dynamic_ratio": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "params"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "params": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitConfig": {
        "type": "object",
        "required": [
          "account",
          "amount",
          "denom"
        ],
        "properties": {
          "account": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "amount": {
            "$ref": "#/definitions/UncheckedSplitAmount"
          },
          "denom": {
            "$ref": "#/definitions/UncheckedDenom"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "process_function"
        ],
        "properties": {
          "process_function": {
            "$ref": "#/definitions/FunctionMsgs"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "new_config"
            ],
            "properties": {
              "new_config": {
                "$ref": "#/definitions/LibraryConfigUpdate"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_processor"
        ],
        "properties": {
          "update_processor": {
            "type": "object",
            "required": [
              "processor"
            ],
            "properties": {
              "processor": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FunctionMsgs": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "split"
            ],
            "properties": {
              "split": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryAccountType": {
        "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "|library_account_addr|"
            ],
            "properties": {
              "|library_account_addr|": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|account_id|"
            ],
            "properties": {
              "|account_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|library_id|"
            ],
            "properties": {
              "|library_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryConfigUpdate": {
        "type": "object",
        "properties": {
          "input_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "splits": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/UncheckedSplitConfig"
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "description": "A denom that has not been checked to confirm it points to a valid asset.",
        "oneOf": [
          {
            "description": "A native (bank module) asset.",
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A cw20 asset.",
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fixed_amount"
            ],
            "properties": {
              "fixed_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fixed_ratio"
            ],
            "properties": {
              "fixed_ratio": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dynamic_ratio"
            ],
            "properties": {
              "dynamic_ratio": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "params"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "params": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitConfig": {
        "type": "object",
        "required": [
          "account",
          "amount",
          "denom"
        ],
        "properties": {
          "account": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "amount": {
            "$ref": "#/definitions/UncheckedSplitAmount"
          },
          "denom": {
            "$ref": "#/definitions/UncheckedDenom"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Enum representing the different query messages that can be sent.",
    "oneOf": [
      {
        "description": "Query to get the processor address.",
        "type": "object",
        "required": [
          "get_processor"
        ],
        "properties": {
          "get_processor": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query to get the library configuration.",
        "type": "object",
        "required": [
          "get_library_config"
        ],
        "properties": {
          "get_library_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_raw_library_config"
        ],
        "properties": {
          "get_raw_library_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query the contract's ownership information",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_library_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "input_addr",
        "splits"
      ],
      "properties": {
        "input_addr": {
          "$ref": "#/definitions/Addr"
        },
        "splits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SplitConfig"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CheckedDenom": {
          "description": "A denom that has been checked to point to a valid asset. This enum should never be constructed literally and should always be built by calling `into_checked` on an `UncheckedDenom` instance.",
          "oneOf": [
            {
              "description": "A native (bank module) asset.",
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A cw20 asset.",
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "SplitAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "fixed_amount"
              ],
              "properties": {
                "fixed_amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "fixed_ratio"
              ],
              "properties": {
                "fixed_ratio": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dynamic_ratio"
              ],
              "properties": {
                "dynamic_ratio": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "params"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    },
                    "params": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SplitConfig": {
          "type": "object",
          "required": [
            "account",
            "amount",
            "denom"
          ],
          "properties": {
            "account": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/SplitAmount"
            },
            "denom": {
              "$ref": "#/definitions/CheckedDenom"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_processor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_raw_library_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LibraryConfig",
      "type": "object",
      "required": [
        "input_addr",
        "splits"
      ],
      "properties": {
        "input_addr": {
          "$ref": "#/definitions/LibraryAccountType"
        },
        "splits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UncheckedSplitConfig"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "LibraryAccountType": {
          "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "|library_account_addr|"
              ],
              "properties": {
                "|library_account_addr|": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "|account_id|"
              ],
              "properties": {
                "|account_id|": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "|library_id|"
              ],
              "properties": {
                "|library_id|": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UncheckedDenom": {
          "description": "A denom that has not been checked to confirm it points to a valid asset.",
          "oneOf": [
            {
              "description": "A native (bank module) asset.",
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A cw20 asset.",
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "UncheckedSplitAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "fixed_amount"
              ],
              "properties": {
                "fixed_amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "fixed_ratio"
              ],
              "properties": {
                "fixed_ratio": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dynamic_ratio"
              ],
              "properties": {
                "dynamic_ratio": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "params"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    },
                    "params": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "UncheckedSplitConfig": {
          "type": "object",
          "required": [
            "account",
            "amount",
            "denom"
          ],
          "properties": {
            "account": {
              "$ref": "#/definitions/LibraryAccountType"
            },
            "amount": {
              "$ref": "#/definitions/UncheckedSplitAmount"
            },
            "denom": {
              "$ref": "#/definitions/UncheckedDenom"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_String",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "type": [
            "string",
            "null"
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
