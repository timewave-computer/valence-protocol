{
  "contract_name": "valence-program-registry",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin"
    ],
    "properties": {
      "admin": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "\"Lock\" an id for a program to avoid race conditions",
        "type": "object",
        "required": [
          "reserve_id"
        ],
        "properties": {
          "reserve_id": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "description": "Temp address that can save a program to the reserved id (manager)",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Save a new program config for the id",
        "type": "object",
        "required": [
          "save_program"
        ],
        "properties": {
          "save_program": {
            "type": "object",
            "required": [
              "id",
              "owner",
              "program_config"
            ],
            "properties": {
              "id": {
                "description": "The reserved id",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "owner": {
                "description": "The owner of the program that can update it later",
                "type": "string"
              },
              "program_config": {
                "description": "The program config to save",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update a program config for the id",
        "type": "object",
        "required": [
          "update_program"
        ],
        "properties": {
          "update_program": {
            "type": "object",
            "required": [
              "id",
              "program_config"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "program_config": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets the most up to date program config for the id",
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the previous program config for the id returns None if there is no backup",
        "type": "object",
        "required": [
          "get_config_backup"
        ],
        "properties": {
          "get_config_backup": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_configs"
        ],
        "properties": {
          "get_all_configs": {
            "type": "object",
            "properties": {
              "end": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "order": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Order"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the last reserved id",
        "type": "object",
        "required": [
          "get_last_id"
        ],
        "properties": {
          "get_last_id": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Order": {
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_all_configs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_ProgramResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProgramResponse"
      },
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "ProgramResponse": {
          "type": "object",
          "required": [
            "id",
            "program_config"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "program_config": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProgramResponse",
      "type": "object",
      "required": [
        "id",
        "program_config"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "program_config": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "get_config_backup": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_ProgramResponse",
      "anyOf": [
        {
          "$ref": "#/definitions/ProgramResponse"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "ProgramResponse": {
          "type": "object",
          "required": [
            "id",
            "program_config"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "program_config": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_last_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  }
}
