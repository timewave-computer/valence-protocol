{
  "contract_name": "valence-middleware-asserter",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "assert"
        ],
        "properties": {
          "assert": {
            "type": "object",
            "required": [
              "a",
              "b",
              "predicate"
            ],
            "properties": {
              "a": {
                "$ref": "#/definitions/AssertionValue"
              },
              "b": {
                "$ref": "#/definitions/AssertionValue"
              },
              "predicate": {
                "$ref": "#/definitions/Predicate"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssertionValue": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "variable"
            ],
            "properties": {
              "variable": {
                "$ref": "#/definitions/QueryInfo"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "constant"
            ],
            "properties": {
              "constant": {
                "$ref": "#/definitions/ValencePrimitive"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Predicate": {
        "type": "string",
        "enum": [
          "l_t",
          "l_t_e",
          "e_q",
          "g_t",
          "g_t_e"
        ]
      },
      "QueryInfo": {
        "type": "object",
        "required": [
          "query",
          "storage_account",
          "storage_slot_key"
        ],
        "properties": {
          "query": {
            "$ref": "#/definitions/Binary"
          },
          "storage_account": {
            "type": "string"
          },
          "storage_slot_key": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "ValencePrimitive": {
        "description": "supported evaluation types. both assertion values must be of this type in order to evaluate the condition.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "decimal"
            ],
            "properties": {
              "decimal": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "uint64"
            ],
            "properties": {
              "uint64": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "uint128"
            ],
            "properties": {
              "uint128": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "uint256"
            ],
            "properties": {
              "uint256": {
                "$ref": "#/definitions/Uint256"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "string"
            ],
            "properties": {
              "string": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": null,
  "migrate": null,
  "sudo": null,
  "responses": null
}
