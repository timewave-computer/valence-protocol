{
  "contract_name": "valence-middleware-broker",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "set_registry"
        ],
        "properties": {
          "set_registry": {
            "type": "object",
            "required": [
              "address",
              "version"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "serialize a message to binary",
        "type": "object",
        "required": [
          "from_canonical"
        ],
        "properties": {
          "from_canonical": {
            "type": "object",
            "required": [
              "obj"
            ],
            "properties": {
              "obj": {
                "$ref": "#/definitions/ValenceType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "deserialize a message from binary/bytes",
        "type": "object",
        "required": [
          "to_canonical"
        ],
        "properties": {
          "to_canonical": {
            "type": "object",
            "required": [
              "binary",
              "type_url"
            ],
            "properties": {
              "binary": {
                "$ref": "#/definitions/Binary"
              },
              "type_url": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "get the kvkey used for registering an interchain query",
        "type": "object",
        "required": [
          "k_v_key"
        ],
        "properties": {
          "k_v_key": {
            "type": "object",
            "required": [
              "params",
              "type_id"
            ],
            "properties": {
              "params": {
                "type": "object",
                "additionalProperties": false
              },
              "type_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "reconstruct_proto"
        ],
        "properties": {
          "reconstruct_proto": {
            "type": "object",
            "required": [
              "icq_result",
              "type_id"
            ],
            "properties": {
              "icq_result": {
                "$ref": "#/definitions/InterchainQueryResult"
              },
              "type_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "InterchainQueryResult": {
        "description": "InterchainQueryResult is a result data for a registered query",
        "type": "object",
        "required": [
          "height",
          "kv_results"
        ],
        "properties": {
          "height": {
            "description": "*height** is a height of remote chain",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "kv_results": {
            "description": "*kv_results** is a raw key-value pairs of query result",
            "type": "array",
            "items": {
              "$ref": "#/definitions/StorageValue"
            }
          },
          "revision": {
            "description": "*revision** is a revision of remote chain",
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "StorageValue": {
        "description": "Describes value in the Cosmos-SDK KV-storage on remote chain",
        "type": "object",
        "required": [
          "key",
          "storage_prefix",
          "value"
        ],
        "properties": {
          "key": {
            "description": "*key** is a key under which the **value** is stored in the storage on remote chain",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "storage_prefix": {
            "description": "*storage_prefix** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
            "type": "string"
          },
          "value": {
            "description": "*value** is a value which is stored under the **key** in the storage on remote chain",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "ValenceBankBalance": {
        "type": "object",
        "required": [
          "assets"
        ],
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "ValenceType": {
        "description": "this is effectively the valence vm types that are enabled on a system level. if a particular type is not defined here, it cannot be used in programs. if a type is here, then developers are free to integrate any remote types that would fall into any of these categories.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "xyk_pool"
            ],
            "properties": {
              "xyk_pool": {
                "$ref": "#/definitions/ValenceXykPool"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "bank_balance"
            ],
            "properties": {
              "bank_balance": {
                "$ref": "#/definitions/ValenceBankBalance"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ValenceXykPool": {
        "type": "object",
        "required": [
          "assets",
          "domain_specific_fields",
          "total_shares"
        ],
        "properties": {
          "assets": {
            "description": "assets in the pool",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "domain_specific_fields": {
            "description": "any other fields that are unique to the external pool type being represented by this struct",
            "type": "object",
            "additionalProperties": false
          },
          "total_shares": {
            "description": "total amount of shares issued",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "from_canonical": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NativeTypeWrapper",
      "type": "object",
      "required": [
        "binary"
      ],
      "properties": {
        "binary": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "k_v_key": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KVKey",
      "description": "Describes a KV key for which you want to get value from the storage on remote chain",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "*key** is a key you want to read from the storage",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "path": {
          "description": "*path** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "reconstruct_proto": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NativeTypeWrapper",
      "type": "object",
      "required": [
        "binary"
      ],
      "properties": {
        "binary": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "to_canonical": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    }
  }
}
