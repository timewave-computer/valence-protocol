{
  "contract_name": "valence-evm-encoder-v1",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "is_valid_library"
        ],
        "properties": {
          "is_valid_library": {
            "type": "object",
            "required": [
              "library"
            ],
            "properties": {
              "library": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "encode"
        ],
        "properties": {
          "encode": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/definitions/ProcessorMessageToEncode"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "decode"
        ],
        "properties": {
          "decode": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/definitions/ProcessorMessageToDecode"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          }
        },
        "additionalProperties": false
      },
      "AtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AtomicFunction"
            }
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Domain": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "main"
            ]
          },
          {
            "type": "object",
            "required": [
              "external"
            ],
            "properties": {
              "external": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EncoderInfo": {
        "type": "object",
        "required": [
          "broker_address",
          "encoder_version"
        ],
        "properties": {
          "broker_address": {
            "type": "string"
          },
          "encoder_version": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FunctionCallback": {
        "type": "object",
        "required": [
          "callback_message",
          "contract_address"
        ],
        "properties": {
          "callback_message": {
            "$ref": "#/definitions/Binary"
          },
          "contract_address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "LibraryAccountType": {
        "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "|library_account_addr|"
            ],
            "properties": {
              "|library_account_addr|": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|account_id|"
            ],
            "properties": {
              "|account_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|library_id|"
            ],
            "properties": {
              "|library_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Message": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "params_restrictions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/ParamRestriction"
            }
          }
        },
        "additionalProperties": false
      },
      "Message2": {
        "type": "object",
        "required": [
          "data",
          "library"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/Binary"
          },
          "library": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MessageDetails": {
        "type": "object",
        "required": [
          "message",
          "message_type"
        ],
        "properties": {
          "message": {
            "$ref": "#/definitions/Message"
          },
          "message_type": {
            "$ref": "#/definitions/MessageType"
          }
        },
        "additionalProperties": false
      },
      "MessageType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "cosmwasm_execute_msg",
              "cosmwasm_migrate_msg",
              "evm_raw_call"
            ]
          },
          {
            "type": "object",
            "required": [
              "evm_call"
            ],
            "properties": {
              "evm_call": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/EncoderInfo"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "NonAtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "callback_confirmation": {
            "anyOf": [
              {
                "$ref": "#/definitions/FunctionCallback"
              },
              {
                "type": "null"
              }
            ]
          },
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "NonAtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NonAtomicFunction"
            }
          }
        },
        "additionalProperties": false
      },
      "ParamRestriction": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "must_be_included"
            ],
            "properties": {
              "must_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cannot_be_included"
            ],
            "properties": {
              "cannot_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "must_be_value"
            ],
            "properties": {
              "must_be_value": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "must_be_bytes"
            ],
            "properties": {
              "must_be_bytes": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Priority": {
        "type": "string",
        "enum": [
          "medium",
          "high"
        ]
      },
      "ProcessorMessageToDecode": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "hyperlane_callback"
            ],
            "properties": {
              "hyperlane_callback": {
                "type": "object",
                "required": [
                  "callback"
                ],
                "properties": {
                  "callback": {
                    "$ref": "#/definitions/HexBinary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ProcessorMessageToEncode": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "send_msgs"
            ],
            "properties": {
              "send_msgs": {
                "type": "object",
                "required": [
                  "execution_id",
                  "messages",
                  "priority",
                  "subroutine"
                ],
                "properties": {
                  "execution_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Message2"
                    }
                  },
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "subroutine": {
                    "$ref": "#/definitions/Subroutine"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "insert_msgs"
            ],
            "properties": {
              "insert_msgs": {
                "type": "object",
                "required": [
                  "execution_id",
                  "messages",
                  "priority",
                  "queue_position",
                  "subroutine"
                ],
                "properties": {
                  "execution_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Message2"
                    }
                  },
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "queue_position": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "subroutine": {
                    "$ref": "#/definitions/Subroutine"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "evict_msgs"
            ],
            "properties": {
              "evict_msgs": {
                "type": "object",
                "required": [
                  "priority",
                  "queue_position"
                ],
                "properties": {
                  "priority": {
                    "$ref": "#/definitions/Priority"
                  },
                  "queue_position": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "pause"
            ],
            "properties": {
              "pause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "resume"
            ],
            "properties": {
              "resume": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RetryLogic": {
        "type": "object",
        "required": [
          "interval",
          "times"
        ],
        "properties": {
          "interval": {
            "$ref": "#/definitions/Duration"
          },
          "times": {
            "$ref": "#/definitions/RetryTimes"
          }
        },
        "additionalProperties": false
      },
      "RetryTimes": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "indefinitely"
            ]
          },
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Subroutine": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "atomic"
            ],
            "properties": {
              "atomic": {
                "$ref": "#/definitions/AtomicSubroutine"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "non_atomic"
            ],
            "properties": {
              "non_atomic": {
                "$ref": "#/definitions/NonAtomicSubroutine"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "decode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "encode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "is_valid_library": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
