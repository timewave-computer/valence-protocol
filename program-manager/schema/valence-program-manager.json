{
  "contract_name": "valence-program-manager",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "program_config",
      "program_config_update"
    ],
    "properties": {
      "program_config": {
        "$ref": "#/definitions/ProgramConfig"
      },
      "program_config_update": {
        "$ref": "#/definitions/ProgramConfigUpdate"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AccountInfo": {
        "description": "The struct given to us by the user.\n\nWe need to know what domain we are talking with and what type of account we should work with.",
        "type": "object",
        "required": [
          "domain",
          "name",
          "ty"
        ],
        "properties": {
          "addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "name": {
            "type": "string"
          },
          "ty": {
            "$ref": "#/definitions/AccountType"
          }
        },
        "additionalProperties": false
      },
      "AccountType": {
        "description": "What account type we talking about",
        "oneOf": [
          {
            "description": "This means the account is already instantiated",
            "type": "object",
            "required": [
              "Addr"
            ],
            "properties": {
              "Addr": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This our base account implementation",
            "type": "object",
            "required": [
              "Base"
            ],
            "properties": {
              "Base": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AssetData": {
        "type": "object",
        "required": [
          "asset1",
          "asset2"
        ],
        "properties": {
          "asset1": {
            "description": "Denom of the first asset",
            "type": "string"
          },
          "asset2": {
            "description": "Denom of the second asset",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain2"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          }
        },
        "additionalProperties": false
      },
      "AtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AtomicFunction"
            }
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AuthorizationData": {
        "description": "This struct holds all the data regarding our authorization and processor contracts and bridge accounts",
        "type": "object",
        "required": [
          "authorization_addr",
          "authorization_bridge_addrs",
          "processor_addrs",
          "processor_bridge_addrs"
        ],
        "properties": {
          "authorization_addr": {
            "description": "authorization contract address on neutron",
            "type": "string"
          },
          "authorization_bridge_addrs": {
            "description": "List of authorization bridge addresses by domain The addresses are on the specified domain Key: domain name | Value: authorization bridge address on that domain",
            "type": "object",
            "additionalProperties": false
          },
          "processor_addrs": {
            "description": "List of processor addresses by domain Key: domain name | Value: processor address",
            "type": "object",
            "additionalProperties": false
          },
          "processor_bridge_addrs": {
            "description": "List of processor bridge addresses by domain All addresses are on nuetron, mapping to what domain this bridge account is for Key: domain name | Value: processor bridge address on that domain",
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "AuthorizationDuration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "forever"
            ]
          },
          {
            "type": "object",
            "required": [
              "seconds"
            ],
            "properties": {
              "seconds": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "blocks"
            ],
            "properties": {
              "blocks": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AuthorizationInfo": {
        "type": "object",
        "required": [
          "duration",
          "label",
          "mode",
          "not_before",
          "subroutine"
        ],
        "properties": {
          "duration": {
            "$ref": "#/definitions/AuthorizationDuration"
          },
          "label": {
            "type": "string"
          },
          "max_concurrent_executions": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "mode": {
            "$ref": "#/definitions/AuthorizationModeInfo"
          },
          "not_before": {
            "$ref": "#/definitions/Expiration"
          },
          "priority": {
            "anyOf": [
              {
                "$ref": "#/definitions/Priority"
              },
              {
                "type": "null"
              }
            ]
          },
          "subroutine": {
            "$ref": "#/definitions/Subroutine"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationInfoUpdate": {
        "description": "The enum that represent all possible changes that can be done on an authorization",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Add"
            ],
            "properties": {
              "Add": {
                "$ref": "#/definitions/AuthorizationInfo"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Modify"
            ],
            "properties": {
              "Modify": {
                "type": "object",
                "required": [
                  "label"
                ],
                "properties": {
                  "expiration": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "label": {
                    "type": "string"
                  },
                  "max_concurrent_executions": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "not_before": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "priority": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Priority"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Disable by label",
            "type": "object",
            "required": [
              "Disable"
            ],
            "properties": {
              "Disable": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Disable by label",
            "type": "object",
            "required": [
              "Enable"
            ],
            "properties": {
              "Enable": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AuthorizationModeInfo": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "permissionless"
            ]
          },
          {
            "type": "object",
            "required": [
              "permissioned"
            ],
            "properties": {
              "permissioned": {
                "$ref": "#/definitions/PermissionTypeInfo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Domain": {
        "description": "We need some way of knowing which domain we are talking with chain connection, execution, bridges for authorization.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "CosmosCosmwasm"
            ],
            "properties": {
              "CosmosCosmwasm": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Domain2": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "main"
            ]
          },
          {
            "type": "object",
            "required": [
              "external"
            ],
            "properties": {
              "external": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ForwardingConstraints": {
        "description": "Struct representing the time constraints on forwarding operations.",
        "type": "object",
        "properties": {
          "min_interval": {
            "description": "The minimum interval between forwarding operations.",
            "anyOf": [
              {
                "$ref": "#/definitions/Duration"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "FunctionCallback": {
        "type": "object",
        "required": [
          "callback_message",
          "contract_address"
        ],
        "properties": {
          "callback_message": {
            "$ref": "#/definitions/Binary"
          },
          "contract_address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "LibraryAccountType": {
        "description": "An account type that is used in the library configs It can either be an Id or Addr The config that will be passed to the library must be of Addr veriant",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "|library_account_addr|"
            ],
            "properties": {
              "|library_account_addr|": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|account_id|"
            ],
            "properties": {
              "|account_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "|library_id|"
            ],
            "properties": {
              "|library_id|": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryConfigUpdate": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "None"
            ]
          },
          {
            "type": "object",
            "required": [
              "ValenceForwarderLibrary"
            ],
            "properties": {
              "ValenceForwarderLibrary": {
                "$ref": "#/definitions/LibraryConfigUpdate2"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValenceSplitterLibrary"
            ],
            "properties": {
              "ValenceSplitterLibrary": {
                "$ref": "#/definitions/LibraryConfigUpdate3"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValenceReverseSplitterLibrary"
            ],
            "properties": {
              "ValenceReverseSplitterLibrary": {
                "$ref": "#/definitions/LibraryConfigUpdate4"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValenceAstroportLper"
            ],
            "properties": {
              "ValenceAstroportLper": {
                "$ref": "#/definitions/LibraryConfigUpdate5"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValenceAstroportWithdrawer"
            ],
            "properties": {
              "ValenceAstroportWithdrawer": {
                "$ref": "#/definitions/LibraryConfigUpdate6"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LibraryConfigUpdate2": {
        "type": "object",
        "properties": {
          "forwarding_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/UncheckedForwardingConfig"
            }
          },
          "forwarding_constraints": {
            "anyOf": [
              {
                "$ref": "#/definitions/ForwardingConstraints"
              },
              {
                "type": "null"
              }
            ]
          },
          "input_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "output_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "LibraryConfigUpdate3": {
        "type": "object",
        "properties": {
          "input_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "splits": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/UncheckedSplitConfig"
            }
          }
        },
        "additionalProperties": false
      },
      "LibraryConfigUpdate4": {
        "type": "object",
        "properties": {
          "base_denom": {
            "anyOf": [
              {
                "$ref": "#/definitions/UncheckedDenom"
              },
              {
                "type": "null"
              }
            ]
          },
          "output_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "splits": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/UncheckedSplitConfig2"
            }
          }
        },
        "additionalProperties": false
      },
      "LibraryConfigUpdate5": {
        "type": "object",
        "properties": {
          "input_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "lp_config": {
            "anyOf": [
              {
                "$ref": "#/definitions/LiquidityProviderConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "output_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pool_addr": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "LibraryConfigUpdate6": {
        "type": "object",
        "properties": {
          "input_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "output_addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/LibraryAccountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pool_addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "withdrawer_config": {
            "anyOf": [
              {
                "$ref": "#/definitions/LiquidityWithdrawerConfig"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "LibraryInfo": {
        "type": "object",
        "required": [
          "domain",
          "name"
        ],
        "properties": {
          "addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "domain": {
            "$ref": "#/definitions/Domain"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "type": "object",
        "required": [
          "input_accounts_id",
          "library_id",
          "output_accounts_id"
        ],
        "properties": {
          "input_accounts_id": {
            "description": "List of input accounts by id",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "library_id": {
            "description": "The library id",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "output_accounts_id": {
            "description": "List of output accounts by id",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      },
      "LiquidityProviderConfig": {
        "type": "object",
        "required": [
          "asset_data",
          "pool_type"
        ],
        "properties": {
          "asset_data": {
            "description": "Denoms of both native assets we are going to provide liquidity for",
            "allOf": [
              {
                "$ref": "#/definitions/AssetData"
              }
            ]
          },
          "pool_type": {
            "description": "Pool type, old Astroport pools use Cw20 lp tokens and new pools use native tokens, so we specify here what kind of token we are going to get. We also provide the PairType structure of the right Astroport version that we are going to use for each scenario",
            "allOf": [
              {
                "$ref": "#/definitions/PoolType"
              }
            ]
          },
          "slippage_tolerance": {
            "description": "Slippage tolerance when providing liquidity",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "LiquidityWithdrawerConfig": {
        "type": "object",
        "required": [
          "pool_type"
        ],
        "properties": {
          "pool_type": {
            "description": "Pool type, old Astroport pools use Cw20 lp tokens and new pools use native tokens, so we specify here what kind of token we are going to get. We also provide the PairType structure of the right Astroport version that we are going to use for each scenario",
            "allOf": [
              {
                "$ref": "#/definitions/PoolType2"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Message": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "params_restrictions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/ParamRestriction"
            }
          }
        },
        "additionalProperties": false
      },
      "MessageDetails": {
        "type": "object",
        "required": [
          "message",
          "message_type"
        ],
        "properties": {
          "message": {
            "$ref": "#/definitions/Message"
          },
          "message_type": {
            "$ref": "#/definitions/MessageType"
          }
        },
        "additionalProperties": false
      },
      "MessageType": {
        "type": "string",
        "enum": [
          "cosmwasm_execute_msg",
          "cosmwasm_migrate_msg"
        ]
      },
      "NonAtomicFunction": {
        "type": "object",
        "required": [
          "contract_address",
          "domain",
          "message_details"
        ],
        "properties": {
          "callback_confirmation": {
            "anyOf": [
              {
                "$ref": "#/definitions/FunctionCallback"
              },
              {
                "type": "null"
              }
            ]
          },
          "contract_address": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "domain": {
            "$ref": "#/definitions/Domain2"
          },
          "message_details": {
            "$ref": "#/definitions/MessageDetails"
          },
          "retry_logic": {
            "anyOf": [
              {
                "$ref": "#/definitions/RetryLogic"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "NonAtomicSubroutine": {
        "type": "object",
        "required": [
          "functions"
        ],
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NonAtomicFunction"
            }
          }
        },
        "additionalProperties": false
      },
      "PairType": {
        "oneOf": [
          {
            "description": "XYK pair type",
            "type": "object",
            "required": [
              "xyk"
            ],
            "properties": {
              "xyk": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Stable pair type",
            "type": "object",
            "required": [
              "stable"
            ],
            "properties": {
              "stable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pair type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PairType2": {
        "oneOf": [
          {
            "description": "XYK pair type",
            "type": "object",
            "required": [
              "xyk"
            ],
            "properties": {
              "xyk": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Stable pair type",
            "type": "object",
            "required": [
              "stable"
            ],
            "properties": {
              "stable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pair type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ParamRestriction": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "must_be_included"
            ],
            "properties": {
              "must_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cannot_be_included"
            ],
            "properties": {
              "cannot_be_included": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "must_be_value"
            ],
            "properties": {
              "must_be_value": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PermissionTypeInfo": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "with_call_limit"
            ],
            "properties": {
              "with_call_limit": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "without_call_limit"
            ],
            "properties": {
              "without_call_limit": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native_lp_token"
            ],
            "properties": {
              "native_lp_token": {
                "$ref": "#/definitions/PairType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20_lp_token"
            ],
            "properties": {
              "cw20_lp_token": {
                "$ref": "#/definitions/PairType2"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolType2": {
        "type": "string",
        "enum": [
          "native_lp_token",
          "cw20_lp_token"
        ]
      },
      "Priority": {
        "type": "string",
        "enum": [
          "medium",
          "high"
        ]
      },
      "ProgramConfig": {
        "type": "object",
        "required": [
          "accounts",
          "authorizations",
          "libraries",
          "links",
          "owner"
        ],
        "properties": {
          "accounts": {
            "description": "The list account data by id",
            "type": "object",
            "additionalProperties": false
          },
          "authorization_data": {
            "description": "This is the info regarding authorization and processor contracts. Must be empty (Default) when a new program is instantiated. It gets populated when the program is instantiated.",
            "default": {
              "authorization_addr": "",
              "authorization_bridge_addrs": {},
              "processor_addrs": {},
              "processor_bridge_addrs": {}
            },
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationData"
              }
            ]
          },
          "authorizations": {
            "description": "A list of authorizations",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationInfo"
            }
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "libraries": {
            "description": "The list service data by id",
            "type": "object",
            "additionalProperties": false
          },
          "links": {
            "description": "A list of links between an accounts and libraries",
            "type": "object",
            "additionalProperties": false
          },
          "owner": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProgramConfigUpdate": {
        "description": "The job of the update, is to output a set of instructions to the user to update the program configuration. The user can only update library configs and authorizations. You can set the owner to change the owner of the program You can provide a list of library updates to perform You can provide a list of authorizations to update",
        "type": "object",
        "required": [
          "authorizations",
          "id",
          "libraries"
        ],
        "properties": {
          "authorizations": {
            "description": "A list of authorizations",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationInfoUpdate"
            }
          },
          "id": {
            "description": "This is the id of the program Required for update",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "libraries": {
            "description": "The list library data by id",
            "type": "object",
            "additionalProperties": false
          },
          "owner": {
            "description": "New owner, if the owner is to be updated",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "RetryLogic": {
        "type": "object",
        "required": [
          "interval",
          "times"
        ],
        "properties": {
          "interval": {
            "$ref": "#/definitions/Duration"
          },
          "times": {
            "$ref": "#/definitions/RetryTimes"
          }
        },
        "additionalProperties": false
      },
      "RetryTimes": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "indefinitely"
            ]
          },
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Subroutine": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "atomic"
            ],
            "properties": {
              "atomic": {
                "$ref": "#/definitions/AtomicSubroutine"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "non_atomic"
            ],
            "properties": {
              "non_atomic": {
                "$ref": "#/definitions/NonAtomicSubroutine"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "description": "A denom that has not been checked to confirm it points to a valid asset.",
        "oneOf": [
          {
            "description": "A native (bank module) asset.",
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A cw20 asset.",
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedForwardingConfig": {
        "description": "Struct representing an unchecked forwarding configuration.",
        "type": "object",
        "required": [
          "denom",
          "max_amount"
        ],
        "properties": {
          "denom": {
            "description": "The denom to be forwarded.",
            "allOf": [
              {
                "$ref": "#/definitions/UncheckedDenom"
              }
            ]
          },
          "max_amount": {
            "description": "The maximum amount of tokens to be transferred per forward operation.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UncheckedSplitAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fixed_amount"
            ],
            "properties": {
              "fixed_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fixed_ratio"
            ],
            "properties": {
              "fixed_ratio": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dynamic_ratio"
            ],
            "properties": {
              "dynamic_ratio": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "params"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "params": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitAmount2": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fixed_amount"
            ],
            "properties": {
              "fixed_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fixed_ratio"
            ],
            "properties": {
              "fixed_ratio": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dynamic_ratio"
            ],
            "properties": {
              "dynamic_ratio": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "params"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "params": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedSplitConfig": {
        "type": "object",
        "required": [
          "account",
          "amount",
          "denom"
        ],
        "properties": {
          "account": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "amount": {
            "$ref": "#/definitions/UncheckedSplitAmount"
          },
          "denom": {
            "$ref": "#/definitions/UncheckedDenom"
          }
        },
        "additionalProperties": false
      },
      "UncheckedSplitConfig2": {
        "type": "object",
        "required": [
          "account",
          "amount",
          "denom"
        ],
        "properties": {
          "account": {
            "$ref": "#/definitions/LibraryAccountType"
          },
          "amount": {
            "$ref": "#/definitions/UncheckedSplitAmount2"
          },
          "denom": {
            "$ref": "#/definitions/UncheckedDenom"
          },
          "factor": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "type": "string",
    "enum": []
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "type": "string",
    "enum": []
  },
  "migrate": null,
  "sudo": null,
  "responses": {}
}
